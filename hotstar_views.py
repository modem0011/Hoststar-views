# -*- coding: utf-8 -*-
"""Hotstar views.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VVsQVGgMpMGc3RpwoIPjkKiJiVvllCJg

#**Data Preperation**
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

data=pd.read_csv("mediacompany.csv")

data=pd.DataFrame(data)

data.head()

data=data.drop("Unnamed: 7",axis=1)

data.head()

data["Date"]=pd.to_datetime(data["Date"])

data.head()

from datetime import datetime

d0=datetime(2017,2,28)
d1=data.Date
delta=d1-d0
data["day"]=delta

data.head()

data["day"]=data["day"].astype(str)
 data["day"]=data["day"].map(lambda x:x[0:2])
 data["day"]=data["day"].astype(int)

data.head()

plt.plot(data["day"],data["Views_show"],color="gold")
plt.xlabel("day")
plt.ylabel("View_show")
plt.show()

plt.scatter(data["day"],data["Views_show"],color="brown")

fig,ax1=plt.subplots()
ax1.plot(data["day"],data["Views_show"],color="brown",linewidth=3)
ax2=ax1.twinx()
ax2.plot(data["day"],data["Ad_impression"],color="yellow",linewidth=3)
plt.show()

data["weekday"]=(data["day"]+3)%7
data["weekday"]=data["weekday"].astype(int)

data.head()

"""#**Model**"""

x=data[["Visitors","weekday"]]
y=data["Views_show"]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

x_train.shape

y_train.shape

from sklearn.linear_model import LinearRegression

lm=LinearRegression()

lm.fit(x_train,y_train)

y_pred=lm.predict(x_test)

import statsmodels.api as sm

x_train1=sm.add_constant(x_train)
a=sm.OLS(y_train,x_train1).fit()

a.summary()

def condn(i):
  if i%7==5 or i%7==4:
    return 1
  else: 
    return 0
data["weekday"]=[condn(i)  for i in data["day"] ]

data.head()

x=data[["Visitors","weekday"]]
y=data["Views_show"]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

import statsmodels.api as sm

x_train1=sm.add_constant(x_train)
a=sm.OLS(y_train,x_train1).fit()

a.summary()    # little r2 increased

x=data[["Visitors","weekday","Character_A"]]
y=data["Views_show"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

x_train1=sm.add_constant(x_train)
a=sm.OLS(y_train,x_train1).fit()

a.summary()

data.tail()

data['prev_views']=np.roll(data.Views_show,1)

data.prev_views.replace(108961,0,inplace=True)   #last row =0

data.head()

X=data[['Visitors','weekday','Character_A','prev_views']]
Y=data["Views_show"]
X1=sm.add_constant(X)
l1=sm.OLS(Y,X1).fit()
l1.summary()

X=data[['Ad_impression','weekday','Character_A']]
X1=sm.add_constant(X)
l1=sm.OLS(Y,X1).fit()                                    #coefficient for ad impression is very less
l1.summary()

data['Ad_impressionpermillion']=data.Ad_impression/1000000

X=data[['Ad_impressionpermillion','weekday','Character_A']]
X1=sm.add_constant(X)
l1=sm.OLS(Y,X1).fit()                                    #coefficient for ad impression is very less
l1.summary()

import statsmodels.api as sm
x1=sm.add_constant(X)
a=sm.OLS(Y,x1).fit()
y_pred=a.predict(X1)

print(r2_score(y_pred,Y))

